/**************************************************************
给定一个长度为N的数组，找出一个最长的单调自增子序列（不一定连续，但是顺序不能乱）
例如：给定一个长度为8的数组A{1,3,5,2,4,6,7,8}，则其最长的单调递增子序列为{1,2,4,6,7,8}，长度为6.


输入描述:

第一行包含一个整数T，代表测试数据组数。

对于每组测试数据：
N-数组的长度

a1 a2 ... an （需要计算的数组）

保证：

1<=N<=3000,0<=ai<=MAX_INT.
  


输出描述:

对于每组数据，输出一个整数，代表最长递增子序列的长度。


输入例子:
2
7
89 256 78 1 46 78 8
5
6 4 8 2 17

输出例子:
3
3
******************************************************************/
//如果需要输出序列，则根据num，从后向前遍历，将结果保存到stack中，然后输出即可
#include<iostream>
using namespace std;
int main(){
    int T;
    int n;
    int a[3000];
    int num[3000];
    int max = 0;
    cin >> T;
    while(T-- > 0){
        cin >> n;
        for(int i = 0; i < n; i++){
            cin >> a[i];
            num[i] = 1;
            for(int j = 0; j <= i; j++){
                if(a[i] > a[j] && num[i] < num[j] + 1){
                    num[i] = num[j] + 1;
                }
            }
            if(max < num[i]) max = num[i];
        }
        cout << max << endl;
        max = 0;
        for(int i = 1; i < n; i++){
            num[i] = 0;
        }
    }
}